import Controller.Configurações;
import Controller.EmprestimosController;
import Controller.LivroController;
import Controller.ReservaController;
import Controller.UtenteController;
import Model.Emprestimos;
import Model.Jornal;
import Model.Livro;
import Model.Utentes;
import View.EmprestimosView;
import View.JornalView;
import View.LivroView;
import View.ReservaView;
import View.UtenteView;

import java.util.ArrayList;
import java.util.Scanner;
import java.io.IOException;

import static Controller.ExportarDados.*;
import static View.LivroView.gerirLivros;
import static View.UtenteView.gerirUtentes;

public class Main {
    public static void main(String[] args) throws IOException {
<<<<<<< HEAD
        // Listas para armazenar livros, utentes e jornais
=======

        String caminhoConfig = "src\\DadosExportados\\Config.txt";

        // Inicializar o leitor de configurações
        Configurações configReader = new Configurações(caminhoConfig);

        // Obter os caminhos do arquivo de configuração
        String caminhoLivros = configReader.getCaminhoLivros();
        String caminhoUtentes = configReader.getCaminhoUtentes();
        String caminhoJornal = configReader.getCaminhoJornal();
        String caminhoEmprestimo = configReader.getCaminhoEmprestimo();

        // Listas para armazenar livros e utentes
>>>>>>> 42696b5db1818335e6cb24b2f4036af36aafa5e9
        ArrayList<Livro> livros = new ArrayList<>();
        ArrayList<Utentes> utentes = new ArrayList<>();
        ArrayList<Jornal> jornals = new ArrayList<>();
        ArrayList<Emprestimos> emprestimos1 = new ArrayList<>();

        // Inicialização das views
        LivroView livroView = new LivroView();
        UtenteView utenteView = new UtenteView();
        JornalView jornalView = new JornalView();

        // Inicialização do controlador de utentes
        UtenteController utenteController = new UtenteController(utentes, utenteView);

        // Inicialização do controlador de empréstimos (temporariamente sem LivroController)
        EmprestimosController emprestimosController = new EmprestimosController(null);

        // Inicialização do controlador de livros com a dependência de EmprestimosController
        LivroController livroController = new LivroController(livros, livroView, emprestimosController);

        // Atualização do EmprestimosController para usar o LivroController
        emprestimosController.setLivroController(livroController);

        // Inicialização do controlador de reservas
        ReservaController reservaController = new ReservaController();

        // Inicialização das views de empréstimos e reservas
        EmprestimosView emprestimosView = new EmprestimosView(emprestimosController, utenteController, livroController);
        ReservaView reservaView = new ReservaView(reservaController, utenteController, livroController);

        // Scanner para interação no menu
        Scanner scanner = new Scanner(System.in);
        int opcao;

        do {
            System.out.println("\n=== Sistema de Gestão de Biblioteca ===");
            System.out.println("1. Gerir Livros");
            System.out.println("2. Gerir Jornais/Revistas");
            System.out.println("3. Gerir Utentes");
            System.out.println("4. Gerir Empréstimos");
            System.out.println("5. Gerir Reservas");
            System.out.println("0. Sair");
            System.out.print("Escolha uma opção: ");
            opcao = scanner.nextInt();

            switch (opcao) {
                case 1:
                    gerirLivros(livroController, scanner);
                    break;
                case 2:
                    jornalView.exibirMenu();
                    break;
                case 3:
                    gerirUtentes(utenteController, scanner);
                    break;
                case 4:
                    emprestimosView.exibirMenu();
                    break;
                case 5:
                    reservaView.exibirMenu();
                    break;
                case 0:
                    System.out.print("Tem certeza de que deseja sair? (S/N): ");
                    char confirmacao = scanner.next().toUpperCase().charAt(0);
                    if (confirmacao == 'S') {
<<<<<<< HEAD
                        // Definir os caminhos dos arquivos de exportação
                        String caminhoLivros = "C:\\Users\\Acer\\Desktop\\APOO\\Projecto Final 1\\Biblioteca-\\Biblioteca-\\src\\DadosExportados\\livros.txt";
                        String caminhoUtentes = "C:\\Users\\Acer\\Desktop\\APOO\\Projecto Final 1\\Biblioteca-\\Biblioteca-\\src\\DadosExportados\\utentes.txt";
                        String caminhoJornal = "C:\\Users\\Acer\\Desktop\\APOO\\Projecto Final 1\\Biblioteca-\\Biblioteca-\\src\\DadosExportados\\jornal.txt";

                        // Chamar os métodos para exportar dados
                        exportarLivros(caminhoLivros, livros);  // Exporta livros
                        exportarUtentes(caminhoUtentes, utentes);  // Exporta utentes
                        exportarJornal(caminhoJornal, jornals);

=======
                        exportarLivros(caminhoLivros, livros);  // Exporta livros
                        exportarUtentes(caminhoUtentes, utentes);  // Exporta utentes
                        exportarJornal(caminhoJornal, jornals);
                        exportarEmprestimos(caminhoEmprestimo, emprestimos1);
>>>>>>> 42696b5db1818335e6cb24b2f4036af36aafa5e9
                        System.out.println("Saindo do sistema...");
                    } else {
                        opcao = -1; // Continua o loop
                    }
                    break;
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        } while (opcao != 0);

        scanner.close();
    }
}
